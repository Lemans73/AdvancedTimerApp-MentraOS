"use strict";
// @mentra/sdk
// packages/sdk/types/src/models.ts - Core models
Object.defineProperty(exports, "__esModule", { value: true });
exports.LEGACY_PERMISSION_MAP = exports.PermissionType = void 0;
exports.validateAppConfig = validateAppConfig;
const enums_1 = require("./enums");
// Define PermissionType enum with legacy support
var PermissionType;
(function (PermissionType) {
    PermissionType["MICROPHONE"] = "MICROPHONE";
    PermissionType["LOCATION"] = "LOCATION";
    PermissionType["CALENDAR"] = "CALENDAR";
    // Legacy notification permission (backward compatibility)
    PermissionType["NOTIFICATIONS"] = "NOTIFICATIONS";
    // New granular notification permissions
    PermissionType["READ_NOTIFICATIONS"] = "READ_NOTIFICATIONS";
    PermissionType["POST_NOTIFICATIONS"] = "POST_NOTIFICATIONS";
    PermissionType["ALL"] = "ALL";
})(PermissionType || (exports.PermissionType = PermissionType = {}));
// Legacy permission mapping for backward compatibility
exports.LEGACY_PERMISSION_MAP = new Map([
    [PermissionType.NOTIFICATIONS, [PermissionType.READ_NOTIFICATIONS]]
]);
/**
 * Validate a App configuration object
 * @param config Object to validate
 * @returns True if the config is valid
 */
function validateAppConfig(config) {
    if (!config || typeof config !== 'object')
        return false;
    // Check required string properties
    if (typeof config.name !== 'string' ||
        typeof config.description !== 'string' ||
        typeof config.version !== 'string') {
        return false;
    }
    // Check settings array
    if (!Array.isArray(config.settings))
        return false;
    // Validate each setting
    return config.settings.every((setting) => {
        // Group settings just need a title
        if (setting.type === 'group') {
            return typeof setting.title === 'string';
        }
        // TITLE_VALUE settings just need label and value
        if (setting.type === 'titleValue') {
            return typeof setting.label === 'string' && 'value' in setting;
        }
        // Regular settings need key and label
        if (typeof setting.key !== 'string' || typeof setting.label !== 'string') {
            return false;
        }
        // Type-specific validation
        switch (setting.type) {
            case enums_1.AppSettingType.TOGGLE:
                return typeof setting.defaultValue === 'boolean';
            case enums_1.AppSettingType.TEXT:
            case enums_1.AppSettingType.TEXT_NO_SAVE_BUTTON:
                return setting.defaultValue === undefined || typeof setting.defaultValue === 'string';
            case enums_1.AppSettingType.SELECT:
            case enums_1.AppSettingType.SELECT_WITH_SEARCH:
                return Array.isArray(setting.options) &&
                    setting.options.every((opt) => typeof opt.label === 'string' && 'value' in opt);
            case enums_1.AppSettingType.MULTISELECT:
                return Array.isArray(setting.options) &&
                    setting.options.every((opt) => typeof opt.label === 'string' && 'value' in opt) &&
                    (setting.defaultValue === undefined || Array.isArray(setting.defaultValue));
            case enums_1.AppSettingType.SLIDER:
                return typeof setting.defaultValue === 'number' &&
                    typeof setting.min === 'number' &&
                    typeof setting.max === 'number' &&
                    setting.min <= setting.max;
            case enums_1.AppSettingType.GROUP:
                return typeof setting.title === 'string';
            case enums_1.AppSettingType.TITLE_VALUE:
                return typeof setting.label === 'string' && 'value' in setting;
            default:
                return false;
        }
    });
}
