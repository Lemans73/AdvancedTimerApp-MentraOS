import { BaseMessage } from './base';
import { AppToCloudMessageType } from '../message-types';
import { ExtendedStreamType } from '../streams';
import { DisplayRequest } from '../layouts';
import { DashboardContentUpdate, DashboardModeChange, DashboardSystemUpdate } from '../dashboard';
import { VideoConfig, AudioConfig, StreamConfig } from '../rtmp-stream';
/**
 * Connection initialization from App
 */
export interface AppConnectionInit extends BaseMessage {
    type: AppToCloudMessageType.CONNECTION_INIT;
    packageName: string;
    sessionId: string;
    apiKey: string;
}
/**
 * Subscription update from App
 */
export interface AppSubscriptionUpdate extends BaseMessage {
    type: AppToCloudMessageType.SUBSCRIPTION_UPDATE;
    packageName: string;
    subscriptions: ExtendedStreamType[];
}
/**
 * Photo request from App
 */
export interface PhotoRequest extends BaseMessage {
    type: AppToCloudMessageType.PHOTO_REQUEST;
    packageName: string;
    saveToGallery?: boolean;
}
/**
 * RTMP stream request from App
 */
export interface RtmpStreamRequest extends BaseMessage {
    type: AppToCloudMessageType.RTMP_STREAM_REQUEST;
    packageName: string;
    rtmpUrl: string;
    video?: VideoConfig;
    audio?: AudioConfig;
    stream?: StreamConfig;
}
/**
 * RTMP stream stop request from App
 */
export interface RtmpStreamStopRequest extends BaseMessage {
    type: AppToCloudMessageType.RTMP_STREAM_STOP;
    packageName: string;
    streamId?: string;
}
/**
 * Union type for all messages from Apps to cloud
 */
export type AppToCloudMessage = AppConnectionInit | AppSubscriptionUpdate | DisplayRequest | PhotoRequest | RtmpStreamRequest | RtmpStreamStopRequest | DashboardContentUpdate | DashboardModeChange | DashboardSystemUpdate | AppBroadcastMessage | AppDirectMessage | AppUserDiscovery | AppRoomJoin | AppRoomLeave;
/**
 * Type guard to check if a message is a App connection init
 */
export declare function isAppConnectionInit(message: AppToCloudMessage): message is AppConnectionInit;
/**
 * Type guard to check if a message is a App subscription update
 */
export declare function isAppSubscriptionUpdate(message: AppToCloudMessage): message is AppSubscriptionUpdate;
/**
 * Type guard to check if a message is a App display request
 */
export declare function isDisplayRequest(message: AppToCloudMessage): message is DisplayRequest;
/**
 * Type guard to check if a message is a App photo request
 */
export declare function isPhotoRequest(message: AppToCloudMessage): message is PhotoRequest;
/**
 * Type guard to check if a message is a dashboard content update
 */
export declare function isDashboardContentUpdate(message: AppToCloudMessage): message is DashboardContentUpdate;
/**
 * Type guard to check if a message is a dashboard mode change
 */
export declare function isDashboardModeChange(message: AppToCloudMessage): message is DashboardModeChange;
/**
 * Type guard to check if a message is a dashboard system update
 */
export declare function isDashboardSystemUpdate(message: AppToCloudMessage): message is DashboardSystemUpdate;
/**
 * Broadcast message to all users with the same App active
 */
export interface AppBroadcastMessage extends BaseMessage {
    type: AppToCloudMessageType.APP_BROADCAST_MESSAGE;
    packageName: string;
    sessionId: string;
    payload: any;
    messageId: string;
    senderUserId: string;
}
/**
 * Direct message to a specific user with the same App active
 */
export interface AppDirectMessage extends BaseMessage {
    type: AppToCloudMessageType.APP_DIRECT_MESSAGE;
    packageName: string;
    sessionId: string;
    targetUserId: string;
    payload: any;
    messageId: string;
    senderUserId: string;
}
/**
 * Request to discover other users with the same App active
 */
export interface AppUserDiscovery extends BaseMessage {
    type: AppToCloudMessageType.APP_USER_DISCOVERY;
    packageName: string;
    sessionId: string;
    includeUserProfiles?: boolean;
}
/**
 * Join a communication room for group messaging
 */
export interface AppRoomJoin extends BaseMessage {
    type: AppToCloudMessageType.APP_ROOM_JOIN;
    packageName: string;
    sessionId: string;
    roomId: string;
    roomConfig?: {
        maxUsers?: number;
        isPrivate?: boolean;
        metadata?: any;
    };
}
/**
 * Leave a communication room
 */
export interface AppRoomLeave extends BaseMessage {
    type: AppToCloudMessageType.APP_ROOM_LEAVE;
    packageName: string;
    sessionId: string;
    roomId: string;
}
/**
 * Type guard to check if a message is an RTMP stream request
 */
export declare function isRtmpStreamRequest(message: AppToCloudMessage): message is RtmpStreamRequest;
/**
 * Type guard to check if a message is an RTMP stream stop request
 */
export declare function isRtmpStreamStopRequest(message: AppToCloudMessage): message is RtmpStreamStopRequest;
//# sourceMappingURL=app-to-cloud.d.ts.map