/**
 * ðŸ“¹ RTMP Streaming Module
 *
 * Provides functionality for Apps to request and manage RTMP streams from smart glasses.
 * Handles stream lifecycle, status monitoring, and cleanup.
 */
import { RtmpStreamStatus } from '../../../types';
import { VideoConfig, AudioConfig, StreamConfig, StreamStatusHandler } from '../../../types/rtmp-stream';
export { VideoConfig, AudioConfig, StreamConfig, StreamStatusHandler };
/**
 * Configuration options for an RTMP stream
 */
export interface RtmpStreamOptions {
    /** The RTMP URL to stream to (e.g., rtmp://server.example.com/live/stream-key) */
    rtmpUrl: string;
    /** Optional video configuration settings */
    video?: VideoConfig;
    /** Optional audio configuration settings */
    audio?: AudioConfig;
    /** Optional stream configuration settings */
    stream?: StreamConfig;
}
/**
 * StreamingModule provides functionality for Apps to request and manage RTMP streams.
 *
 * Streams can be requested with configurable parameters for video quality,
 * audio settings, and stream constraints. Status updates are received through
 * the standard subscription mechanism.
 */
export declare class StreamingModule {
    private send;
    private packageName;
    private sessionId;
    private session?;
    private isStreaming;
    private currentStreamUrl?;
    private currentStreamState?;
    /**
     * Create a new StreamingModule
     *
     * @param packageName - The App package name
     * @param sessionId - The current session ID
     * @param send - Function to send messages to the cloud
     * @param session - Reference to the parent AppSession (optional)
     */
    constructor(packageName: string, sessionId: string, send: (message: any) => void, session?: any);
    /**
     * Begin an RTMP stream to the specified URL
     *
     * @param options - Configuration options for the stream
     * @returns Promise that resolves when the stream request is sent (not when streaming begins)
     */
    requestStream(options: RtmpStreamOptions): Promise<void>;
    /**
     * Stop the current RTMP stream
     *
     * @returns Promise that resolves when the stop request is sent
     */
    stopStream(): Promise<void>;
    /**
     * Check if currently streaming
     *
     * @returns True if a stream is active or initializing
     */
    isCurrentlyStreaming(): boolean;
    /**
     * Get the URL of the current stream (if any)
     *
     * @returns The RTMP URL of the current stream, or undefined if not streaming
     */
    getCurrentStreamUrl(): string | undefined;
    /**
     * Get the current stream status
     *
     * @returns The current stream status, or undefined if not available
     */
    getStreamStatus(): RtmpStreamStatus | undefined;
    /**
     * Subscribe to RTMP stream status updates
     * This uses the standard stream subscription mechanism
     */
    subscribeToStatusUpdates(): void;
    /**
     * Unsubscribe from RTMP stream status updates
     */
    unsubscribeFromStatusUpdates(): void;
    /**
     * Listen for status updates using the standard event system
     * @param handler - Function to call when stream status changes
     * @returns Cleanup function to remove the handler
     */
    onStatus(handler: StreamStatusHandler): () => void;
    /**
     * Update internal stream state based on a status message
     * For internal use by AppSession
     * @param message - The status message from the cloud
     */
    updateStreamState(message: any): void;
}
//# sourceMappingURL=streaming.d.ts.map